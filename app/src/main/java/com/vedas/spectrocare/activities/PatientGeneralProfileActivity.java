package com.vedas.spectrocare.activities;import androidx.annotation.NonNull;import androidx.annotation.RequiresApi;import androidx.appcompat.app.AppCompatActivity;import androidx.core.app.ActivityCompat;import androidx.core.content.FileProvider;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.OkHttpClient;import okhttp3.RequestBody;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;import android.Manifest;import android.annotation.SuppressLint;import android.app.AlertDialog;import android.app.DatePickerDialog;import android.app.Dialog;import android.content.DialogInterface;import android.content.Intent;import android.content.pm.PackageManager;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Color;import android.graphics.Matrix;import android.graphics.drawable.Drawable;import android.media.ExifInterface;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Environment;import android.provider.MediaStore;import android.text.InputType;import android.util.Base64;import android.util.Log;import android.util.Patterns;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.DatePicker;import android.widget.EditText;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.NumberPicker;import android.widget.ProgressBar;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.TextView;import android.widget.Toast;import com.google.android.material.bottomsheet.BottomSheetDialog;import com.google.android.material.textfield.TextInputEditText;import com.google.android.material.textfield.TextInputLayout;import com.vedas.spectrocare.Controllers.PersonalInfoController;import com.vedas.spectrocare.DataBase.MedicalProfileDataController;import com.vedas.spectrocare.DataBase.PatientProfileDataController;import com.vedas.spectrocare.DataBase.TrackInfoDataController;import com.vedas.spectrocare.DataBaseModels.MedicalProfileModel;import com.vedas.spectrocare.DataBaseModels.PatientlProfileModel;import com.vedas.spectrocare.DataBaseModels.TrackInfoModel;import com.vedas.spectrocare.Location.LocationTracker;import com.vedas.spectrocare.R;import com.vedas.spectrocare.ServerApi;import com.vedas.spectrocare.ServerApiModel.PatientDetailsModel;import com.squareup.picasso.Picasso;import com.squareup.picasso.Target;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.Objects;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.TimeUnit;public class PatientGeneralProfileActivity extends AppCompatActivity implements MedicalPersonaSignupView {    TextInputEditText Age, PAddress,edtPMail,txt_date,PostalCode, Country, state, PhoneNumber,txtGender,lastName,            CountyCode, fistname, city;    RequestBody Pmedical_personnel_Id, DofB, PfirstName, PLastName,Pgender, Page, PphoneNumber,            Paddress,Pcity, Pstate, PCountry,PpatientID ,PpostalCod,hospital_reg_num, latitude, longitude,            PemailID, PphoneNumberCountryCode;    TextInputEditText txtPatientID,txtMedicalID;    TextView backTxt,titlePatientId,titleMedicalId;    RadioButton cb1, cb2, cb3;    String selectedAge = "0";    String selectedTitle = "y";    NumberPicker numberPickerAge, agePicker;    ImageView imgView;    AlertDialog.Builder dialog1;    LayoutInflater inflater;    AlertDialog dialog;    String gender;    Boolean imageVV;    ImageView imgEdt;    TextView txtGeneralProfileTitle,txtEdtGeneralProfileTitle;    Button save,updatePatient;    private String mCurrentPhotoPath;    File file = null;    ProgressBar progressBar;    AlertDialog.Builder dialog2;    AlertDialog alertDialog;    TextInputLayout layoutPatientID,layoutMedicalID;    String  tempbirthDayObj="";    private Bitmap bitmap;    RadioGroup radioGroup;    String profileBase64Obj, oldProfielBase64Obj;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_patient_general_profile);        imageVV = false;        PersonalInfoController.getInstance().fillContent(getApplicationContext());        PersonalInfoController.getInstance().loadAgeUnitaArray();        PersonalInfoController.getInstance().loadHeightValuesArray();        MedicalProfileDataController.getInstance().fetchMedicalProfileData();        Casting();        //CheckBox();        cb1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                txtGender.setText("Male");            }        });        cb2.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                txtGender.setText("Female");            }        });        cb3.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                txtGender.setText("Others");            }        });        dialog2 = new AlertDialog.Builder(PatientGeneralProfileActivity.this);        LayoutInflater inflater = PatientGeneralProfileActivity.this.getLayoutInflater();        View dialogView = inflater.inflate(R.layout.progress, null);        progressBar = dialogView.findViewById(R.id.progressBar);        dialog2.setView(dialogView);        progressBar.setVisibility(View.VISIBLE);        alertDialog = dialog2.create();        alertDialog.setCancelable(false);        alertDialog.setCanceledOnTouchOutside(false);        txtEdtGeneralProfileTitle = findViewById(R.id.title_edt_general_profile);        imgEdt = findViewById(R.id.img_edt);        txtGeneralProfileTitle = findViewById(R.id.title_general_profile);        layoutPatientID = findViewById(R.id.layout_patient_id);        layoutMedicalID = findViewById(R.id.layout_medical_record_id);        titlePatientId = findViewById(R.id.title_patient_id);        titleMedicalId = findViewById(R.id.title_medical_record);        Age.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Age.setInputType(InputType.TYPE_NULL);                loadAgePicker();            }        });        DatePicker();        Date currentDate = new Date();        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");        tempbirthDayObj = dateFormat.format(currentDate);        MedicalProfileDataController.getInstance().fetchMedicalProfileData();       // PatientProfileDataController.getInstance().fetchPatientlProfileData();        if (MedicalProfileDataController.getInstance().currentMedicalProfile != null) {          MedicalProfileModel obj= MedicalProfileDataController.getInstance().currentMedicalProfile;        }        imgView.setOnClickListener(new View.OnClickListener() {            @RequiresApi(api = Build.VERSION_CODES.KITKAT)            @Override            public void onClick(View v) {                imageVV = true;              //  cameraDailog();                cameraBottomSheet();            }        });        imgEdt.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                updatePatient.setVisibility(View.VISIBLE);                txtGeneralProfileTitle.setVisibility(View.GONE);                txtEdtGeneralProfileTitle.setVisibility(View.VISIBLE);                imgEdt.setVisibility(View.GONE);                touchMode();            }        });        if ( PatientProfileDataController.getInstance().currentPatientlProfile!= null){            final PatientlProfileModel profileModel=PatientProfileDataController.getInstance().currentPatientlProfile;            save.setVisibility(View.GONE);            Age.setEnabled(false);            txt_date.setEnabled(false);            PAddress.setFocusable(false);            imgView.setEnabled(false);            edtPMail.setFocusable(false);            PostalCode.setFocusable(false);            Country.setFocusable(false);            state.setFocusable(false);            PhoneNumber.setFocusable(false);            lastName.setFocusable(false);            CountyCode.setFocusable(false);            fistname.setFocusable(false);            radioGroup.setEnabled(false);            cb1.setEnabled(false);            cb2.setEnabled(false);            cb3.setEnabled(false);            city.setFocusable(false);            txtPatientID.setFocusable(false);            txtPatientID.setTextColor(Color.parseColor("#53B9c6"));            txtMedicalID.setFocusable(false);            txtMedicalID.setTextColor(Color.parseColor("#53B9c6"));/*            layoutMedicalID.setVisibility(View.VISIBLE);            layoutPatientID.setVisibility(View.VISIBLE);*/            imgEdt.setVisibility(View.VISIBLE);          /*  titleMedicalId.setVisibility(View.VISIBLE);            titlePatientId.setVisibility(View.VISIBLE);          */  txtPatientID.setVisibility(View.VISIBLE);            txtMedicalID.setVisibility(View.VISIBLE);            txtPatientID.setText(profileModel.getPatientId());            txtMedicalID.setText(profileModel.getMedicalRecordId());            lastName.setText(profileModel.getLastName());            fistname.setText(profileModel.getFirstName());            edtPMail.setText(profileModel.getEmailId());            PAddress.setText(profileModel.getAddress());            state.setText(profileModel.getState());            city.setText(profileModel.getCity());            Country.setText(profileModel.getCountry());            PostalCode.setText(profileModel.getPostalCode());            Age.setText(profileModel.getAge());            PhoneNumber.setText(profileModel.getPhoneNumber());            CountyCode.setText(profileModel.getPhone_coutryCode());            edtPMail.setFocusable(false);            gender=profileModel.getGender();            Log.e("gender",""+gender);            if (gender.equals("Male")) {                cb1.setChecked(true);                txtGender.setText("Male");            }else {                cb2.setChecked(true);                txtGender.setText("Female");            }            if(!profileModel.getDob().isEmpty()){                txt_date.setText(profileModel.getDob());            }            Log.e("profielpic","call"+profileModel.getGender());            Picasso.get().load(profileModel.getProfilePic()).into(imgView);            Picasso.get().load(profileModel.getProfilePic()).into(new Target() {                @Override                public void onBitmapLoaded(final Bitmap bitmap1, Picasso.LoadedFrom from) {                    ExecutorService taskExecutor = Executors.newFixedThreadPool(1);                    try {                        Runnable backgroundTask = new Runnable() {                            @Override                            public void run() {                                Log.e("profileCheck", "" + bitmap1);                                file = createImageFileFromBitmap(bitmap1);                                bitmap = bitmap1;                                Log.e("fgfgfg", "" + file);                                loadEncoded64ImageStringFromBitmap(bitmap);                                oldProfielBase64Obj = profileBase64Obj;                            }                        };                        taskExecutor.submit(backgroundTask);                        taskExecutor.shutdown();                        taskExecutor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);                    }catch (InterruptedException e) {                    }                }                @Override                public void onBitmapFailed(Exception e, Drawable errorDrawable) {                }                @Override                public void onPrepareLoad(Drawable placeHolderDrawable) {                }            });            updatePatient.setOnClickListener(new View.OnClickListener() {                @RequiresApi(api = Build.VERSION_CODES.KITKAT)                @Override                public void onClick(View v) {                    file= createImageFileFromBitmap(bitmap);                    if (cb1.isChecked()) {                        gender = cb1.getText().toString();                    }                    if (cb2.isChecked()) {                        gender = cb2.getText().toString();                    }                    if (cb3.isChecked()) {                        gender = cb3.getText().toString();                    }                    gender = txtGender.getText().toString();                    Log.e("geText",""+gender);                    if (edtPMail.getText().toString().isEmpty())                        dialogeforCheckavilability("Error", "Please enter emailID ", "ok");                    if (!Patterns.EMAIL_ADDRESS.matcher(edtPMail.getText().toString()).matches())                        dialogeforCheckavilability("Error", "Please enter valid emailID ", "ok");                    else if (lastName.getText().toString().isEmpty())                        dialogeforCheckavilability("Error", "Please enter last name ", "ok");                    else if (fistname.getText().toString().isEmpty())                        dialogeforCheckavilability("Error", "Please enter first name ", "ok");                    else if (gender.isEmpty())                        dialogeforCheckavilability("Error", "Please select gender ", "ok");                    else if (Age.getText().toString().isEmpty())                        dialogeforCheckavilability("Error", "Please enter age ", "ok");                    else if (PhoneNumber.getText().toString().isEmpty())                        dialogeforCheckavilability("Error", "Please enter phone number ", "ok");                    else if (CountyCode.getText().toString().isEmpty())                        dialogeforCheckavilability("Error", "Please enter country code ", "ok");                    else if (PAddress.getText().toString().isEmpty())                        dialogeforCheckavilability("Error", "Please enter Address ", "ok");                    else if (city.getText().toString().isEmpty())                        dialogeforCheckavilability("Error", "Please enter city ", "ok");                    else if (state.getText().toString().isEmpty())                        dialogeforCheckavilability("Error", "Please enter state ", "ok");                    else if (PostalCode.getText().toString().isEmpty())                        dialogeforCheckavilability("Error", "Please enter postal code ", "ok");                    else if (Country.getText().toString().isEmpty())                        dialogeforCheckavilability("Error", "Please enter country ", "ok");                    else {                        gender = txtGender.getText().toString();                        if (checkProfielDataNotChanged()) {                            finish();                            /*startActivity(new Intent(getApplicationContext(), MyPatientActivity.class));                            overridePendingTransition(0,0);*/                            return;                        }                        alertDialog.show();                        Objects.requireNonNull(alertDialog.getWindow()).setLayout(600, 500);                        RequestBody image;                        OkHttpClient.Builder okhttpClientBuilder = new OkHttpClient.Builder();                        okhttpClientBuilder.connectTimeout(45, TimeUnit.SECONDS);                        okhttpClientBuilder.readTimeout(45, TimeUnit.SECONDS);                        okhttpClientBuilder.writeTimeout(45, TimeUnit.SECONDS);                        Retrofit retrofit = new Retrofit.Builder().baseUrl(ServerApi.home_url)                                .client(okhttpClientBuilder.build())                                .addConverterFactory(GsonConverterFactory.create()).build();                        ServerApi s = retrofit.create(ServerApi.class);                        try {                            String Latitude = "14.6738";                            String Longitude = "15.7873";                            String PreferLanguage = "English";                            MultipartBody.Part profilePic;                            image = RequestBody.create(MediaType.parse("image/*"), file);                            Log.e("ghghghgh", "" + file);                            profilePic = MultipartBody.Part.createFormData("profilePic", file.getName(), image);                            Pmedical_personnel_Id = RequestBody.create(MediaType.parse("text/plain"), MedicalProfileDataController.getInstance().currentMedicalProfile.getMedical_person_id());                            PfirstName = RequestBody.create(MediaType.parse("text/plain"), fistname.getText().toString());                            PLastName = RequestBody.create(MediaType.parse("text/plain"), lastName.getText().toString());                            PphoneNumber = RequestBody.create(MediaType.parse("text/plain"), PhoneNumber.getText().toString());                            Paddress = RequestBody.create(MediaType.parse("text/plain"), PAddress.getText().toString());                            Pcity = RequestBody.create(MediaType.parse("text/plain"), city.getText().toString());                            Pstate = RequestBody.create(MediaType.parse("text/plain"), state.getText().toString());                            PCountry = RequestBody.create(MediaType.parse("text/plain"), Country.getText().toString());                            PpostalCod = RequestBody.create(MediaType.parse("text/plain"), PostalCode.getText().toString());                            PphoneNumberCountryCode = RequestBody.create(MediaType.parse("text/plain"), CountyCode.getText().toString());                            PemailID = RequestBody.create(MediaType.parse("text/plain"), edtPMail.getText().toString());                            Log.e("Pmail", "" + PemailID);                            PpatientID = RequestBody.create(MediaType.parse("text/plain"), profileModel.getPatientId());                            Pgender = RequestBody.create(MediaType.parse("text/plain"), gender);                            hospital_reg_num = RequestBody.create(MediaType.parse("text/plain"),PatientProfileDataController.getInstance().currentPatientlProfile.getHospital_reg_number());                            Page = RequestBody.create(MediaType.parse("text/plain"), Age.getText().toString());                            latitude = RequestBody.create(MediaType.parse("text/plain"), Latitude);                            longitude = RequestBody.create(MediaType.parse("text/plain"), Longitude);                            DofB = RequestBody.create(MediaType.parse("text/plain"), txt_date.getText().toString());                            Log.e("attempt_time",""+txt_date.getText().toString());                            String idPatient = profileModel.getPatientId();                            String idMedicalPerson = MedicalProfileDataController.getInstance().currentMedicalProfile.getMedical_person_id();                            txtMedicalID.setText(idMedicalPerson);                            txtPatientID.setText(idPatient);                            Call<PatientDetailsModel> call = s.PatientUpdate(MedicalProfileDataController.getInstance().currentMedicalProfile.getAccessToken(), PfirstName, PLastName, Pgender, Page,                                    PphoneNumber, Paddress, Pcity, Pstate, PCountry, PpostalCod, Pmedical_personnel_Id, hospital_reg_num,                                    latitude, longitude, profilePic, PemailID, PpatientID, PphoneNumberCountryCode, DofB);                            Log.e("CallResponse", "" + call);                            call.enqueue(new Callback<PatientDetailsModel>() {                                @Override                                public void onResponse(Call<PatientDetailsModel> call, Response<PatientDetailsModel> response) {                                    Log.e("patientUp", "response" + response.message());                                    if (response.body() != null) {                                        alertDialog.dismiss();                                        Log.e("ServiceResponse", "onResponse: " + response.body().getProfilePic());                                       // Toast.makeText(PatientGeneralProfileActivity.this, resp, Toast.LENGTH_SHORT).show();                                        String code = response.body().getResponse();                                        if (code.equals("0")){                                            LayoutInflater inflater = getLayoutInflater();                                            View layout = inflater.inflate(R.layout.toast_layout,                                                    (ViewGroup) findViewById(R.id.custom_toast_container));                                            TextView text = (TextView) layout.findViewById(R.id.text);                                            text.setText(response.body().getMessage());                                            Toast toast = new Toast(PatientGeneralProfileActivity.this);                                            //toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);                                            toast.setDuration(Toast.LENGTH_LONG);                                            toast.setView(layout);                                            toast.show();                                        }                                            //Toast.makeText(PatientGeneralProfileActivity.this, response.body().getMessage(), Toast.LENGTH_SHORT).show();                                        if (response.body().getResponse().equals("3")){                                            Log.e("RetrofitInstance", "" + response.body().getProfilePic());                                            PatientlProfileModel profileModel = new PatientlProfileModel();                                            profileModel.setMedicalProfileModel(MedicalProfileDataController.getInstance().currentMedicalProfile);                                            profileModel.setPatientId(PatientProfileDataController.getInstance().currentPatientlProfile.getPatientId());                                            profileModel.setAddress(PAddress.getText().toString());                                            profileModel.setAge(Age.getText().toString());                                            profileModel.setCity(city.getText().toString());                                            profileModel.setCountry(Country.getText().toString());                                            profileModel.setDob(txt_date.getText().toString());                                            profileModel.setEmailId(edtPMail.getText().toString());                                            profileModel.setFirstName(fistname.getText().toString());                                            profileModel.setGender(gender);                                            profileModel.setHospital_reg_number(MedicalProfileDataController.getInstance().currentMedicalProfile.getHospital_reg_number());                                            profileModel.setLastName(lastName.getText().toString());                                            profileModel.setLatitude(String.valueOf(LocationTracker.getInstance().currentLocation.getLatitude()));                                            profileModel.setLongitude(String.valueOf(LocationTracker.getInstance().currentLocation.getLongitude()));                                            profileModel.setMedicalPerson_id(MedicalProfileDataController.getInstance().currentMedicalProfile.getMedical_person_id());                                            profileModel.setPhoneNumber(PhoneNumber.getText().toString());                                            profileModel.setPhone_coutryCode(CountyCode.getText().toString());                                            profileModel.setPostalCode(PostalCode.getText().toString());                                          //  profileModel.setProfileByteArray(PersonalInfoController.getInstance().convertBitmapToByteArray(bitmap));                                            profileModel.setState(state.getText().toString());                                            profileModel.setProfilePic(ServerApi.img_home_url+response.body().getProfilePic());                                            Log.e("image", "" + profileModel.getProfilePic());                                            if(PatientProfileDataController.getInstance().updateMedicalProfileData(profileModel)) {                                                PatientProfileDataController.getInstance().fetchPatientlProfileData();                                            }                                            ArrayList<TrackInfoModel> trackInfoModels= TrackInfoDataController.getInstance().fetchTrackData(PatientProfileDataController.getInstance().currentPatientlProfile);                                            if(trackInfoModels.size()>0){                                                TrackInfoModel trackInfoModel=trackInfoModels.get(trackInfoModels.size()-1);                                                trackInfoModel.setDate(String.valueOf(System.currentTimeMillis() / 1000L));                                                if(TrackInfoDataController.getInstance().updateTrackData(trackInfoModel)){                                                    TrackInfoDataController.getInstance().fetchTrackData(PatientProfileDataController.getInstance().currentPatientlProfile);                                                }                                            }                                            Intent intent = new Intent(PatientGeneralProfileActivity.this,MyPatientActivity.class);                                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_CLEAR_TOP);                                            startActivity(intent);                                        }                                }                                }                                @Override                                public void onFailure(Call<PatientDetailsModel> call, Throwable t) {                                    // Log.e("jio","response"+t.toString());                                    t.printStackTrace();                                    alertDialog.dismiss();                                    Toast.makeText(PatientGeneralProfileActivity.this, t.getMessage(), Toast.LENGTH_SHORT).show();                                }                            });                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                }            });        }        save.setOnClickListener(new View.OnClickListener() {            @RequiresApi(api = Build.VERSION_CODES.KITKAT)            @Override            public void onClick(View v) {                if (cb1.isChecked()) {                    gender = "Male";                }                if (cb2.isChecked()) {                    gender = "Female";                }                if (cb3.isChecked()) {                    gender = "Other";                }                gender = txtGender.getText().toString();                if (edtPMail.getText().toString().isEmpty())                    dialogeforCheckavilability("Error", "Please enter emailID ", "ok");                if (!Patterns.EMAIL_ADDRESS.matcher(edtPMail.getText().toString()).matches())                    dialogeforCheckavilability("Error", "Please enter valid emailID ", "ok");                else if (lastName.getText().toString().isEmpty())                    dialogeforCheckavilability("Error", "Please enter last name ", "ok");                else if (fistname.getText().toString().isEmpty())                    dialogeforCheckavilability("Error", "Please enter first name ", "ok");                else if (gender.isEmpty())                    dialogeforCheckavilability("Error", "Please select gender ", "ok");                else if (Age.getText().toString().isEmpty())                    dialogeforCheckavilability("Error", "Please enter age ", "ok");                else if (PhoneNumber.getText().toString().isEmpty())                    dialogeforCheckavilability("Error", "Please enter phone number ", "ok");                else if (CountyCode.getText().toString().isEmpty())                    dialogeforCheckavilability("Error", "Please enter country code ", "ok");                else if (PAddress.getText().toString().isEmpty())                    dialogeforCheckavilability("Error", "Please enter Address ", "ok");                else if (PAddress.getText().length()<=9)                    dialogeforCheckavilability("Error", "Address should be in 10 characters ", "ok");                else if (city.getText().toString().isEmpty())                    dialogeforCheckavilability("Error", "Please enter city ", "ok");                else if (state.getText().toString().isEmpty())                    dialogeforCheckavilability("Error", "Please enter state ", "ok");                else if (PostalCode.getText().toString().isEmpty())                    dialogeforCheckavilability("Error", "Please enter postal code ", "ok");                else if (Country.getText().toString().isEmpty())                    dialogeforCheckavilability("Error", "Please enter country ", "ok");                else {                    alertDialog.show();                    Objects.requireNonNull(alertDialog.getWindow()).setLayout(600, 500);                    RequestBody image;                    OkHttpClient.Builder okhttpClientBuilder = new OkHttpClient.Builder();                    okhttpClientBuilder.connectTimeout(45, TimeUnit.SECONDS);                    okhttpClientBuilder.readTimeout(45, TimeUnit.SECONDS);                    okhttpClientBuilder.writeTimeout(45, TimeUnit.SECONDS);                    Retrofit retrofit = new Retrofit.Builder().baseUrl(ServerApi.home_url)                            .client(okhttpClientBuilder.build())                            .addConverterFactory(GsonConverterFactory.create()).build();                    ServerApi s = retrofit.create(ServerApi.class);                    String Latitude = "14.6738";                    String Longitude = "15.7873";                    gender = txtGender.getText().toString();                    if (mCurrentPhotoPath == null) {                        Bitmap bitMap = BitmapFactory.decodeResource(getResources(), R.drawable.ic_human_dummy3x);                        file = createImageFileFromBitmap(bitMap);                        bitmap=bitMap;                        Log.e("filenull",""+mCurrentPhotoPath);                    } else {                        file = new File(mCurrentPhotoPath);                        Log.e("fileupload",""+mCurrentPhotoPath);                    }                    MultipartBody.Part profilePic;                    image = RequestBody.create(MediaType.parse("image/*"), file);                    profilePic = MultipartBody.Part.createFormData("profilePic", file.getName(), image);                    Pmedical_personnel_Id = RequestBody.create(MediaType.parse("text/plain"), MedicalProfileDataController.getInstance().currentMedicalProfile.getMedical_person_id());                    PfirstName = RequestBody.create(MediaType.parse("text/plain"), fistname.getText().toString());                    PLastName = RequestBody.create(MediaType.parse("text/plain"), lastName.getText().toString());                    PphoneNumber = RequestBody.create(MediaType.parse("text/plain"), PhoneNumber.getText().toString());                    Paddress = RequestBody.create(MediaType.parse("text/plain"), PAddress.getText().toString());                    Pcity = RequestBody.create(MediaType.parse("text/plain"), city.getText().toString());                    Pstate = RequestBody.create(MediaType.parse("text/plain"), state.getText().toString());                    PCountry = RequestBody.create(MediaType.parse("text/plain"), Country.getText().toString());                    PpostalCod = RequestBody.create(MediaType.parse("text/plain"), PostalCode.getText().toString());                    PphoneNumberCountryCode = RequestBody.create(MediaType.parse("text/plain"), CountyCode.getText().toString());                    PemailID = RequestBody.create(MediaType.parse("text/plain"), edtPMail.getText().toString());                    Pgender = RequestBody.create(MediaType.parse("text/plain"), gender);                    hospital_reg_num = RequestBody.create(MediaType.parse("text/plain"), MedicalProfileDataController.getInstance().currentMedicalProfile.getHospital_reg_number());                    Page = RequestBody.create(MediaType.parse("text/plain"), Age.getText().toString());                    latitude = RequestBody.create(MediaType.parse("text/plain"), Latitude);                    longitude = RequestBody.create(MediaType.parse("text/plain"), Longitude);                    DofB = RequestBody.create(MediaType.parse("text/plain"), txt_date.getText().toString());                    Log.e("txt_dob", "" + txt_date.getText().toString());                    Call<PatientDetailsModel> call = s.addPatient(MedicalProfileDataController.getInstance().currentMedicalProfile.getAccessToken(), PfirstName, PLastName, Pgender, Page,                            PphoneNumber, Paddress, Pcity, Pstate, PCountry, PpostalCod, Pmedical_personnel_Id, hospital_reg_num,                            latitude, longitude, profilePic, PemailID, PphoneNumberCountryCode, DofB);                    Log.e("CallResponse", "" + call);                    call.enqueue(new Callback<PatientDetailsModel>() {                        @Override                        public void onResponse(Call<PatientDetailsModel> call, Response<PatientDetailsModel> response) {                            if (response.body() != null) {                                alertDialog.dismiss();                                String resp = response.body().getResponse();                                Log.e("RetrofitInstance", "" + resp);                                String code = response.body().getResponse();                                if (code.equals("0"))                                    alertDialog.dismiss();                                    Toast.makeText(PatientGeneralProfileActivity.this, response.body().getMessage(), Toast.LENGTH_SHORT).show();                                if (response.body().getResponse().equals("3")) {                                    alertDialog.dismiss();                                    Log.e("RetrofitInstance", "" + response.body().getPatientId());                                    PatientlProfileModel profileModel = new PatientlProfileModel();                                    profileModel.setMedicalProfileModel(MedicalProfileDataController.getInstance().currentMedicalProfile);                                    profileModel.setPatientId(response.body().getPatientId());                                    profileModel.setAddress(PAddress.getText().toString());                                    profileModel.setAge(Age.getText().toString());                                    profileModel.setCity(city.getText().toString());                                    profileModel.setCountry(Country.getText().toString());                                    profileModel.setDob(txt_date.getText().toString());                                    profileModel.setEmailId(edtPMail.getText().toString());                                    profileModel.setFirstName(fistname.getText().toString());                                    profileModel.setGender(gender);                                    profileModel.setHospital_reg_number(MedicalProfileDataController.getInstance().currentMedicalProfile.getHospital_reg_number());                                    profileModel.setLastName(lastName.getText().toString());                                    profileModel.setLatitude(String.valueOf(LocationTracker.getInstance().currentLocation.getLatitude()));                                    profileModel.setLongitude(String.valueOf(LocationTracker.getInstance().currentLocation.getLongitude()));                                    profileModel.setMedicalPerson_id(MedicalProfileDataController.getInstance().currentMedicalProfile.getMedical_person_id());                                    profileModel.setPhoneNumber(PhoneNumber.getText().toString());                                    profileModel.setPhone_coutryCode(CountyCode.getText().toString());                                    profileModel.setPostalCode(PostalCode.getText().toString());                                  //  profileModel.setProfileByteArray(PersonalInfoController.getInstance().convertBitmapToByteArray(bitmap));                                    profileModel.setState(state.getText().toString());                                    profileModel.setProfilePic(ServerApi.img_home_url+response.body().getProfilePic());                                    Log.e("progielpic", "" + profileModel.getProfilePic());                                    if(PatientProfileDataController.getInstance().insertPatientlProfileData(profileModel)){                                    }                                    TrackInfoModel trackInfoModel=new TrackInfoModel();                                    trackInfoModel.setPatientlProfileModel(profileModel);                                    trackInfoModel.setPatientId(profileModel.getPatientId());                                    trackInfoModel.setByWhom(profileModel.getFirstName()+" "+profileModel.getLastName());                                    trackInfoModel.setByWhomId(profileModel.getPatientId());                                    Long l=Long.parseLong(String.valueOf(System.currentTimeMillis() / 1000L));                                    trackInfoModel.setDate(String.valueOf(l));                                    if(TrackInfoDataController.getInstance().insertTrackData(trackInfoModel)){                                        // TrackInfoDataController.getInstance().fetchTrackData(profileModel);                                    }                                    Intent intent = new Intent(PatientGeneralProfileActivity.this, MyPatientActivity.class);                                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);                                    startActivity(intent);                                }                            }                        }                        @Override                        public void onFailure(Call<PatientDetailsModel> call, Throwable t) {                            // Log.e("jio","response"+t.toString());                            t.printStackTrace();                            alertDialog.dismiss();                            LayoutInflater inflater = getLayoutInflater();                            View layout = inflater.inflate(R.layout.toast_layout,                                    (ViewGroup) findViewById(R.id.custom_toast_container));                            TextView text = (TextView) layout.findViewById(R.id.text);                            text.setText(t.getMessage());                            Toast toast = new Toast(PatientGeneralProfileActivity.this);                            //toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);                            toast.setDuration(Toast.LENGTH_LONG);                            toast.setView(layout);                            toast.show();                            // Toast.makeText(PatientGeneralProfileActivity.this, t.getMessage(), Toast.LENGTH_SHORT).show();                        }                    });                }            }        });    }    public static final int CAMERA_REQUEST_CODE = 1001;    public static final int GALLERY_REQUEST_CODE = 1002;    public static final int CAMERA_PERMISSION_CODE = 5001;    public static final int GALLERY_PERMISSION_CODE = 5002;    protected void onActivityResult(int requestCode, int resultCode, Intent imageReturnedIntent) {        super.onActivityResult(requestCode, resultCode, imageReturnedIntent);        BitmapFactory.Options options = new BitmapFactory.Options();        options.inJustDecodeBounds = false;        options.inPurgeable = true;        if (requestCode == CAMERA_REQUEST_CODE && resultCode == RESULT_OK) {            Bitmap bitmap1 = BitmapFactory.decodeFile(mCurrentPhotoPath, options);            Bitmap rotatedBitmap = rotatedImageBitmap(mCurrentPhotoPath, bitmap1);            bitmap=rotatedBitmap;            imgView.setImageBitmap(getResizedBitmap(rotatedBitmap, 500));            loadEncoded64ImageStringFromBitmap(bitmap);        } else if (requestCode == CAMERA_REQUEST_CODE && resultCode == RESULT_CANCELED) {            Toast.makeText(PatientGeneralProfileActivity.this, "Image Capturing Cancelled", Toast.LENGTH_SHORT).show();        } else if (requestCode == GALLERY_REQUEST_CODE && resultCode == RESULT_OK) {            Uri selectedImage = imageReturnedIntent.getData();            if (selectedImage != null && selectedImage.toString()                    .startsWith("content://com.google.android.apps.photos.content")) {                if (selectedImage.toString().contains("video")) {                    Toast.makeText(this, "Hey ! It's Video Buddy", Toast.LENGTH_SHORT).show();                    return;                }                createImageFromPhotosUri(selectedImage);            } else {                String[] filePathColumn = {MediaStore.Images.Media.DATA};                Cursor cursor = getContentResolver().query(selectedImage, filePathColumn, null, null, null);                cursor.moveToFirst();                int columnIndex = cursor.getColumnIndex(filePathColumn[0]);                mCurrentPhotoPath = cursor.getString(columnIndex);                cursor.close();                options.inSampleSize = 2;                bitmap = BitmapFactory.decodeFile(mCurrentPhotoPath, options);                loadEncoded64ImageStringFromBitmap(bitmap);                Log.e("gallery photo","call"+mCurrentPhotoPath);            }            Bitmap rotatedBitmap = rotatedImageBitmap(mCurrentPhotoPath, bitmap);            imgView.setImageBitmap(getResizedBitmap(rotatedBitmap, 500));        } else if (requestCode == GALLERY_REQUEST_CODE && resultCode == RESULT_CANCELED) {            Toast.makeText(PatientGeneralProfileActivity.this, "Image Selection Cancelled", Toast.LENGTH_SHORT).show();        }    }    private void createImageFromPhotosUri(Uri selectedImage) {        try {            InputStream is = getContentResolver().openInputStream(selectedImage);            if (is != null) {                bitmap = BitmapFactory.decodeStream(is);                ByteArrayOutputStream outStream = new ByteArrayOutputStream();                bitmap.compress(Bitmap.CompressFormat.JPEG, 70, outStream);                File f = createImageFile();                try {                    FileOutputStream fo = new FileOutputStream(f);                    fo.write(outStream.toByteArray());                    fo.flush();                    fo.close();                } catch (IOException e) {                    Log.w("TAG", "Error saving image file: " + e.getMessage());                }            }        } catch (IOException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    private File createImageFileFromBitmap(Bitmap bitmap) {        try {            ByteArrayOutputStream outStream = new ByteArrayOutputStream();            bitmap.compress(Bitmap.CompressFormat.JPEG, 70, outStream);            File f = createImageFile();            try {                FileOutputStream fo = new FileOutputStream(f);                fo.write(outStream.toByteArray());                fo.flush();                fo.close();                return f;            } catch (IOException e) {                Log.w("TAG", "Error saving image file: " + e.getMessage());                return null;            }        } catch (IOException e) {            // TODO Auto-generated catch block            e.printStackTrace();            return null;        }    }    public Bitmap getResizedBitmap(Bitmap image, int maxSize) {        int width = image.getWidth();        int height = image.getHeight();        float bitmapRatio = (float) width / (float) height;        if (bitmapRatio > 1) {            width = maxSize;            height = (int) (width / bitmapRatio);        } else {            height = maxSize;            width = (int) (height * bitmapRatio);        }        return Bitmap.createScaledBitmap(image, width, height, true);    }    private void LoadImageFromGallery() {        Intent galleryIntent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.INTERNAL_CONTENT_URI);        startActivityForResult(galleryIntent, GALLERY_REQUEST_CODE);    }    private void LoadCaptureImageScreen() {        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);        // Ensure that there's a camera activity to handle the intent        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {            // Create the File where the photo should go            File photoFile = null;            try {                photoFile = createImageFile();            } catch (IOException ex) {                // Error occurred while creating the File            }            // Continue only if the File was successfully created            if (photoFile != null) {                Uri photoURI = FileProvider.getUriForFile(PatientGeneralProfileActivity.this,                        "com.vedas.spectrocare.fileprovider",                        photoFile);                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);                startActivityForResult(takePictureIntent, CAMERA_REQUEST_CODE);            }        }    }    private File createImageFile() throws IOException {        // Create an image file name        @SuppressLint("SimpleDateFormat")        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());        String imageFileName = "JPEG_" + timeStamp + "_";        File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);        File image = File.createTempFile(                imageFileName,  /* prefix */                ".jpg",         /* suffix */                storageDir      /* directory */        );        // Save a file: path for use with ACTION_VIEW intents        mCurrentPhotoPath = image.getAbsolutePath();        return image;    }    private Bitmap rotatedImageBitmap(String photoPath, Bitmap bitmap) {        ExifInterface ei = null;        try {            ei = new ExifInterface(photoPath);        } catch (IOException e) {            e.printStackTrace();        }        int orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,                ExifInterface.ORIENTATION_UNDEFINED);        Bitmap rotatedBitmap = null;        switch (orientation) {            case ExifInterface.ORIENTATION_ROTATE_90:                rotatedBitmap = rotateImage(bitmap, 90);                break;            case ExifInterface.ORIENTATION_ROTATE_180:                rotatedBitmap = rotateImage(bitmap, 180);                break;            case ExifInterface.ORIENTATION_ROTATE_270:                rotatedBitmap = rotateImage(bitmap, 270);                break;            case ExifInterface.ORIENTATION_NORMAL:            default:                rotatedBitmap = bitmap;        }        return rotatedBitmap;    }    public static Bitmap rotateImage(Bitmap source, float angle) {        Matrix matrix = new Matrix();        matrix.postRotate(angle);        return Bitmap.createBitmap(source, 0, 0, source.getWidth(), source.getHeight(),                matrix, true);    }    public void cameraDailog() {        TextView cam, gal, canc;        dialog1 = new AlertDialog.Builder(PatientGeneralProfileActivity.this);        inflater = PatientGeneralProfileActivity.this.getLayoutInflater();        final View dialogView = inflater.inflate(R.layout.camera_dailog, null);        dialog1.setView(dialogView);        cam = dialogView.findViewById(R.id.camera);        gal = dialogView.findViewById(R.id.gallery);        canc = dialogView.findViewById(R.id.cancel);        canc.setTextColor(Color.parseColor("#ED5276"));        cam.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (ActivityCompat.checkSelfPermission(PatientGeneralProfileActivity.this,                        Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {                    dialog.dismiss();                    LoadCaptureImageScreen();                } else {                    requestCameraPermission();                }            }        });        gal.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (ActivityCompat.checkSelfPermission(PatientGeneralProfileActivity.this,                        Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {                    dialog.dismiss();                    LoadImageFromGallery();                } else {                    requestStoragePermission();                }            }        });        canc.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                dialog.dismiss();            }        });        dialog = dialog1.create();        dialog.show();    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        switch (requestCode) {            case CAMERA_PERMISSION_CODE:                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                    LoadCaptureImageScreen();                } else {                    Toast.makeText(PatientGeneralProfileActivity.this, "Yay! You Denied Permission", Toast.LENGTH_SHORT).show();                }                break;            case GALLERY_PERMISSION_CODE:                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                    LoadImageFromGallery();                } else {                    Toast.makeText(PatientGeneralProfileActivity.this, "Yay! You Denied Permission", Toast.LENGTH_SHORT).show();                }                break;            default:                break;        }    }    private void requestCameraPermission() {        if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.CAMERA)) {            new androidx.appcompat.app.AlertDialog.Builder(this)                    .setTitle("Permission Info")                    .setMessage("Camera Permission is Needed for Adding your Profile Image")                    .setPositiveButton("ok", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            ActivityCompat.requestPermissions(PatientGeneralProfileActivity.this,                                    new String[]{Manifest.permission.CAMERA}, CAMERA_PERMISSION_CODE);                        }                    })                    .setNegativeButton("cancel", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            dialog.dismiss();                        }                    })                    .create()                    .show();        } else {            ActivityCompat.requestPermissions(PatientGeneralProfileActivity.this,                    new String[]{Manifest.permission.CAMERA}, CAMERA_PERMISSION_CODE);        }    }    private void requestStoragePermission() {        if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_EXTERNAL_STORAGE)) {            new androidx.appcompat.app.AlertDialog.Builder(this)                    .setTitle("Permission Info")                    .setMessage("Gallery Permission is needed for adding your Profile Image")                    .setPositiveButton("Ok", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialogInterface, int i) {                            dialog.dismiss();                            ActivityCompat.requestPermissions(PatientGeneralProfileActivity.this,                                    new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, GALLERY_PERMISSION_CODE);                        }                    })                    .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialogInterface, int i) {                            dialog.dismiss();                            dialogInterface.dismiss();                        }                    })                    .create()                    .show();        } else {            ActivityCompat.requestPermissions(PatientGeneralProfileActivity.this,                    new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, GALLERY_PERMISSION_CODE);        }    }    public void DatePicker(){        txt_date.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                loadDatePicker();            }        });    }    int year, month, day;    public void loadDatePicker() {        final DatePickerDialog dialog;        if (txt_date.getText().toString().isEmpty()) {            Log.e("ifcall", "call");            String[] txtBirthdayArray = tempbirthDayObj.split("-");            year = Integer.parseInt(txtBirthdayArray[0]);            month = Integer.parseInt(txtBirthdayArray[1]);            day = Integer.parseInt(txtBirthdayArray[2]);            Log.e("textdate", "call" + year + "-" + month + "-" + day);            dialog = new DatePickerDialog(this, null, year, month - 1, day);            dialog.getDatePicker().setMaxDate(new Date().getTime());            dialog.show();        } else {            tempbirthDayObj = txt_date.getText().toString();            String[] txtBirthdayArray = tempbirthDayObj.split("-");            year = Integer.parseInt(txtBirthdayArray[0]);            month = Integer.parseInt(txtBirthdayArray[1]);            day = Integer.parseInt(txtBirthdayArray[2]);            Log.e("textdate", "call" + year + "-" + month + "-" + day);            dialog = new DatePickerDialog(this, null, year, month - 1, day);            dialog.getDatePicker().setMaxDate(new Date().getTime());            dialog.show();        }        dialog.setButton(DialogInterface.BUTTON_POSITIVE,                "OK", new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog1, int which) {                        DatePicker objDatePicker = dialog.getDatePicker();                        year = objDatePicker.getYear();                        month = objDatePicker.getMonth();                        day = objDatePicker.getDayOfMonth();                        txt_date.setText(year + "-" + (month + 1) + "-" + day);                        String age = String.valueOf(Calendar.getInstance().get(Calendar.YEAR)-year);                        Age.setText(age);                        Log.e("txt_dob", "" + txt_date.getText().toString());                    }                });        dialog.setButton(DialogInterface.BUTTON_NEGATIVE,                "Cancel", new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog,                                        int which) {                    }                });    }    public boolean checkProfielDataNotChanged() {        PatientlProfileModel obj=PatientProfileDataController.getInstance().currentPatientlProfile;        Log.e("checkProfielDataNot", "call"+obj.getPatientId());        if (obj.getEmailId().equals(edtPMail.getText().toString()) && obj.getLastName().equals(lastName.getText().toString()) && obj.getFirstName().equals(fistname.getText().toString())                && obj.getDob().equals(txt_date.getText().toString()) && obj.getAge().equals(Age.getText().toString()) &&                obj.getPhoneNumber().equals(PhoneNumber.getText().toString())                && obj.getGender().equals(gender) &&  obj.getPhone_coutryCode().equals(CountyCode.getText().toString())                && obj.getAddress().equals(PAddress.getText().toString()) && obj.getCity().equals(city.getText().toString())                && oldProfielBase64Obj.equals(profileBase64Obj) && obj.getState().equals(state.getText().toString())                && obj.getPostalCode().equals(PostalCode.getText().toString())  && obj.getCountry().equals(Country.getText().toString())){            return true;        }        return false;    }    public void loadEncoded64ImageStringFromBitmap(Bitmap bitmap) {        ByteArrayOutputStream stream = new ByteArrayOutputStream();        bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);        byte[] imageInByte = stream.toByteArray();        profileBase64Obj = Base64.encodeToString(imageInByte, Base64.NO_WRAP);        Log.e("base64Image", "call" + profileBase64Obj);    }    public String getCurrentTime() {       String  currentTime= String.valueOf(System.currentTimeMillis() / 1000L);       return currentTime;    }   /* public void CheckBox() {        check(cb1, cb2, cb3);        check(cb2, cb1, cb3);        check(cb3, cb1, cb2);    }    public void check(final CheckBox c, final CheckBox c1, final CheckBox c2) {        c.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (c.isChecked()) {                    c1.setChecked(false);                    c2.setChecked(false);                }            }        });    }*/    public void Casting() {        backTxt = findViewById(R.id.back);        imgView = findViewById(R.id.Pimv);        edtPMail = findViewById(R.id.edt_Pemail);        fistname = findViewById(R.id.edt_pfirst_name);        lastName = findViewById(R.id.edt_plast_name);        txtPatientID = findViewById(R.id.txt_patient_id);        txtMedicalID = findViewById(R.id.txt_medical_id);        imgEdt = findViewById(R.id.img_edt);        cb1 = findViewById(R.id.male);        cb2 = findViewById(R.id.female);        cb3 = findViewById(R.id.other);        radioGroup = findViewById(R.id.radio_group);        txtGender = findViewById(R.id.edt_gender);        Age = findViewById(R.id.edt_page);        PhoneNumber = findViewById(R.id.edt_p_phone_no);        PAddress = findViewById(R.id.edt_address);        city = findViewById(R.id.edt_city);        Country = findViewById(R.id.edt_country);        txt_date = findViewById(R.id.pdate);        state = findViewById(R.id.edt_state);        PostalCode = findViewById(R.id.edt_postal_code);        CountyCode = findViewById(R.id.edt_pcounty_code);        save = findViewById(R.id.btn_psave);        updatePatient = findViewById(R.id.btn_update_patient);        backTxt.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                onBackPressed();            }        });    }    @RequiresApi(api = Build.VERSION_CODES.KITKAT)    public void cameraBottomSheet(){        TextView cam, gal, canc,file;        View dialogView = getLayoutInflater().inflate(R.layout.file_dailog, null);        final BottomSheetDialog cameraBottomSheetDialog =new BottomSheetDialog(Objects.requireNonNull(PatientGeneralProfileActivity.this), R.style.BottomSheetDialogTheme);        cameraBottomSheetDialog.setContentView(dialogView);        cam = cameraBottomSheetDialog.findViewById(R.id.camera);        gal = cameraBottomSheetDialog.findViewById(R.id.gallery);        file = cameraBottomSheetDialog.findViewById(R.id.file);        canc = cameraBottomSheetDialog.findViewById(R.id.cancel);        file.setVisibility(View.GONE);        FrameLayout bottomSheet = (FrameLayout) cameraBottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet);        bottomSheet.setBackground(null);        cameraBottomSheetDialog.show();        canc.setTextColor(Color.parseColor("#53B9c6"));        cam.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (ActivityCompat.checkSelfPermission(PatientGeneralProfileActivity.this,                        Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {                    // dialog.dismiss();                    cameraBottomSheetDialog.cancel();                    LoadCaptureImageScreen();                } else {                    cameraBottomSheetDialog.cancel();                    // dialog.dismiss();                    requestCameraPermission();                }            }        });/*        file.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (ActivityCompat.checkSelfPermission(ScreeningRecordActivity.this,                        Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {                    cameraBottomSheetDialog.cancel();                    showFileChooser();                } else {                    cameraBottomSheetDialog.cancel();                    requestStoragePermission();                }            }        });*/        gal.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (ActivityCompat.checkSelfPermission(PatientGeneralProfileActivity.this,                        Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {                    cameraBottomSheetDialog.cancel();                    LoadImageFromGallery();                } else {                    requestStoragePermission();                }            }        });        canc.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                cameraBottomSheetDialog.cancel();            }        });    }public void touchMode(){                PAddress.setFocusableInTouchMode(true);                edtPMail.setFocusableInTouchMode(true);                imgView.setEnabled(true);                PostalCode.setFocusableInTouchMode(true);                Country.setFocusableInTouchMode(true);                state.setFocusableInTouchMode(true);                txt_date.setEnabled(true);                Age.setEnabled(true);                cb1.setEnabled(true);                cb2.setEnabled(true);                cb3.setEnabled(true);                PhoneNumber.setFocusableInTouchMode(true);                lastName.setFocusableInTouchMode(true);                CountyCode.setFocusableInTouchMode(true);                fistname.setFocusableInTouchMode(true);                city.setFocusableInTouchMode(true);                txtPatientID.setFocusable(false);                txtMedicalID.setFocusable(false);    layoutMedicalID.setVisibility(View.VISIBLE);    layoutPatientID.setVisibility(View.VISIBLE);}    private void loadAgePicker() {        final Dialog mod = new Dialog(PatientGeneralProfileActivity.this);        mod.requestWindowFeature(Window.FEATURE_NO_TITLE);        mod.setContentView(R.layout.alert_dailog);        mod.show();        TextView txtTitle = (TextView) mod.findViewById(R.id.title);        txtTitle.setText("Select Age");        numberPickerAge = mod.findViewById(R.id.value);        if (Age.getText().toString().length() > 0 && Age.getText().toString().contains("y")) {            String weightArray[] = Age.getText().toString().split(" ");            selectedAge = weightArray[0];            selectedTitle = weightArray[1];        } else {            selectedAge = Age.getText().toString();        }        Log.e("selectAge", "call" + selectedAge);        ////for value array        numberPickerAge.setDisplayedValues(null);        int index = PersonalInfoController.getInstance().ageValuesArray.indexOf(selectedAge);        numberPickerAge.setMinValue(0);        numberPickerAge.setWrapSelectorWheel(false);        numberPickerAge.setMaxValue(PersonalInfoController.getInstance().ageValuesArray.size() - 1);        String[] mStringArray = new String[PersonalInfoController.getInstance().ageValuesArray.size()];        mStringArray = PersonalInfoController.getInstance().ageValuesArray.toArray(mStringArray);        numberPickerAge.setDisplayedValues(mStringArray);        numberPickerAge.setValue(index);        //for measure        agePicker = (NumberPicker) mod.findViewById(R.id.name);        agePicker.setWrapSelectorWheel(false);        agePicker.setMaxValue(0);        agePicker.setMinValue(0);        agePicker.setDisplayedValues(PersonalInfoController.getInstance().ageUnitsArray);        numberPickerAge.setOnValueChangedListener(new NumberPicker.OnValueChangeListener() {            @Override            public void onValueChange(NumberPicker picker, int oldVal, int newVal) {                selectedAge = PersonalInfoController.getInstance().ageValuesArray.get(newVal);            }        });        Button btnOk = mod.findViewById(R.id.ok);        btnOk.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                mod.cancel();                mod.dismiss();                Age.setText(selectedAge );                txt_date.setText("");            }        });        Button btnCancel = mod.findViewById(R.id.cancle);        btnCancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                mod.dismiss();            }        });    }    @Override    public void dialogeforCheckavilability(String title, String message, String ok) {        MedicalPersonalSignupPresenter presenter = new MedicalPersonalSignupPresenter(this);        AlertDialog.Builder alertBuilder = new AlertDialog.Builder(PatientGeneralProfileActivity.this);        presenter.dialogebox(alertBuilder, title, message, ok);    }}